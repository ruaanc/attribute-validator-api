PARSER_BEGIN(ValidationDSL)
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;
public class ValidationDSL {
    public static void main(String[] args) {
        try {
            InputStream input = System.in;
            ValidationDSL parser = new ValidationDSL(input);
            parser.start();
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }
}

PARSER_END(ValidationDSL)

TOKEN : {
< CEP: (["0"-"9"]){5}("-")(["0"-"9"]){3} >
| < CPF: (["0"-"9"]){3}(".")(["0"-"9"]){3}(".")(["0"-"9"]){3}("-")(["0"-"9"]){2} >
| < CNPJ: (["0"-"9"]){2}(".")(["0"-"9"]){3}(".")(["0"-"9"]){3}("/")(["0"-"9"]){4}("-")(["0"-"9"]){2} >
| < NAME: (["a"-"z","A"-"Z", " "])+ >
| < EMAIL: "email: "(["a"-"z","A"-"Z","0"-"9","+","-","_",".","@"])+ >
| < INPUT: (~["\r","\n"])+ >
}

void start() :
{
    Token t;

    do {
        t = getNextToken();

        switch (t.kind) {
            case CEP:
                String cep = t.image;
                System.out.println("Cep: " + cep);
                try {
                    URL url = new URL("http://viacep.com.br/ws/"+ cep +"/json");
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    conn.setRequestMethod("GET");
                    Scanner scanner = new Scanner(conn.getInputStream());
                    StringBuffer buffer = new StringBuffer();
                    while (scanner.hasNextLine()) {
                        buffer.append(scanner.nextLine());
                    }
                    scanner.close();
                    String value = buffer.toString();
                    if(value.contains("erro")) {
                        throw new Exception("CEP inválido.");
                    }
                    System.out.println("CEP é válido.");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            case CNPJ:
                String cnpj = t.image;
                System.out.println("Cnpj: " + cnpj);
                try{
                 URL url = new URL("https://receitaws.com.br/v1/cnpj/" + cnpj.replace(".", "").replace("/", "").replace("-", ""));
                 HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                 conn.setRequestMethod("GET");
                 Scanner scanner = new Scanner(conn.getInputStream());
                 StringBuffer buffer = new StringBuffer();
                 while (scanner.hasNextLine()) {
                     buffer.append(scanner.nextLine());
                 }
                 String value = buffer.toString();
                 if(value.contains("ERROR")) {
                     throw new Exception("CNPJ inválido.");
                 }
                 System.out.println("CNPJ é válido.");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            case CPF:
                String cpf = t.image;
                System.out.println("Cpf: " + cpf);
                try {
                    cpf = cpf.replaceAll("[^0-9]+", "");
                    boolean isAllDigitsSame = true;
                    for (int i = 1; i < cpf.length(); i++) {
                        if (cpf.charAt(i) != cpf.charAt(0)) {
                            isAllDigitsSame = false;
                            break;
                        }
                    }
                    if (isAllDigitsSame) {
                        throw new Exception("CPF inválido: Todos os dígitos são iguais.");
                    }

                    int sum = 0;
                    for (int i = 0; i < 9; i++) {
                        int digit = Integer.parseInt(cpf.substring(i, i+1));
                        sum += digit * (10 - i);
                    }
                    int rest = sum % 11;
                    int verifyingDigit1 = (rest < 2) ? 0 : (11 - rest);
                    if ((verifyingDigit1 != Integer.parseInt(cpf.substring(9, 10)) || verifyingDigit1 == 0)) {
                        throw new Exception("CPF inválido: Dígito verificador incorreto.");
                    }

                    System.out.println("CPF é válido.");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            case NAME:
                String name = t.image;
                System.out.println("Name: " + name);
                try {
                    String regex = "^[a-zA-Z]+(([a-zA-Z ])?[a-zA-Z]*)*$";
                    boolean isValid = name.matches(regex) && name.split(" ").length >= 2;
                    if(!isValid) {
                        throw new Exception("Nome inválido.");
                    }
                    System.out.println("Nome é válido.");
                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
            case EMAIL:
                try {
                    String email = t.image.split(":")[1].trim();
                    System.out.println("Email: " + email);
                    String regex = "^[\\w.-]+@[a-z]+\\.[a-z]{2,3}$";
                    boolean isEmailValid = email.matches(regex);
                    if(!isEmailValid) {
                        throw new Exception("Email inválido.");
                    }
                    System.out.println("Email é válido.");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                break;
            default:
                System.out.println("Error de sintaxe.");
                break;
        }
    } while (t.kind != 0);
}
{
    (<CEP> | <CPF> | <CNPJ> | <NAME> | <EMAIL> | <INPUT>)*
}