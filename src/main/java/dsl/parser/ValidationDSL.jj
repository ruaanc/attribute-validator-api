PARSER_BEGIN(ValidationDSL)
package dsl.parser;

import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;
import dsl.*;
public class ValidationDSL {
    public static void main(String[] args) {
        ValidationDSL parser;
        if(args.length == 0) {
            System.out.println("Attribute Validator: Reading . . .");
            parser = new Exp1Parser(System.in);
        } else if(args.length == 1) {
            System.out.println("Attribute Validator: Reading " + args [0] + " . . .");
            try {
                parser = new ValidationDSL(new FileInputStream(args[0]));
            } catch (FileNotFoundException e) {
                System.out.println("Attribute Validator:  File " + args[0] + " not found.");
                return;
            }
        } else {
            System.out.println("Attribute Validator:  Usage is one of:");
            System.out.println("         java ValidationDSL < inputfile");
            System.out.println("OR");
            System.out.println("         java ValidationDSL inputfile");
            return;
        }

        try {
            Program program = parser.Input();
        } catch (ParseException e) {
            System.out.println("Attribute Validator: Encountered errors during parse.");
        }
    }
 }

PARSER_END(ValidationDSL)

TOKEN : {
< CEP: "cep: "(["0"-"9"]){5}("-")(["0"-"9"]){3} >
| < CPF: "cpf: "(["0"-"9"]){3}(".")(["0"-"9"]){3}(".")(["0"-"9"]){3}("-")(["0"-"9"]){2} >
| < CNPJ: "cnpj: "(["0"-"9"]){2}(".")(["0"-"9"]){3}(".")(["0"-"9"]){3}("/")(["0"-"9"]){4}("-")(["0"-"9"]){2} >
| < NAME: "name: "(["a"-"z","A"-"Z", " "])+ >
| < EMAIL: "email: "(["a"-"z","A"-"Z","0"-"9","+","-","_",".","@"])+ >
}

TOKEN : /* LITERALS */
{ < STRING_LITERAL :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        )
      )
    )*
    "\"" >
}

dsl.Program Input() :
{
 dsl.Program response;
}
{
    response = PProgram() < EOF >

    { return response;}
}

Program PProgram() :
{
  Expression response;
}
{
  response = PExpression()
  {
    return new Program(response);
  }
}

Expression PExpression() :
{
  Expression response;
}
{
  response = PUnaryExp()
  {
    return response;
  }
}

Expression PUnaryExp() :
{
  Expression response;
}
{
  (
    response = PZipCodeExp()
  | response = PCnpjExp()
  | response = PCpfExp()
  | response = PNameExp()
  | response = PEmailExp()
  )
  {
    return response;
  }
}

Expression PZipCodeExp() :
{
  Expression response;
}
{
  < CEP > response = PPrimaryExp()
  {
    return new ZipCodeExpression(response);
   }
}

Expression PPrimaryExp() :
{
  Expression response;
}
{
  (
    response = PValue()
  | response = PExpression()
  )
  {
    return response;
  }
}

Value PValue() :
{
  Value response;
}
{
  ( response = PStringValue() )
  {
    return response;
  }
}

Value PStringValue() :
{
  Token token;
}
{
  token = < STRING_LITERAL >
  {
  String tokenStr = token.toString();
  tokenStr = tokenStr.substring(1, tokenStr.length() - 1);
  return new StringValue(tokenStr);
}
}

Expression PCnpjExp() :
{
  Expression response;
}
{
  < CNPJ > response = PPrimaryExp()
  {
 return new CnpjExpression(response);
}
}

Expression PCpfExp() :
{
  Expression response;
}
{
  < CPF > response = PPrimaryExp()
  {
 return new CpfExpression(response);
}
}

Expression PNameExp() :
{
  Expression response;
}
{
  < NAME > response = PPrimaryExp()
  {
 return new NameExpression(response);
}
}

Expression PEmailExp() :
{
  Expression response;
}
{
  < EMAIL > response = PPrimaryExp()
  {
 return new EmailExpression(response);
}
}